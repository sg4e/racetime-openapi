openapi: 3.0.1
info:
  title: Racetime.gg API
  description: 'API for the open-source race server.'
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
servers:
  - url: https://racetime.gg
externalDocs:
  description: Racetime.gg website
  url: https://racetime.gg
paths:
  /races/data:
    get:
      summary: All races
      description: Returns a list of all open and ongoing races
      responses:
        200:
          headers:
            X-Exact-Date:
              $ref: '#/components/headers/DateTimeHeader'
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  races:
                    type: array
                    items:
                      $ref: '#/components/schemas/Race'
  /{category}/data:
    get:
      summary: Category detail
      description: This endpoint includes all the basic information about the category shown on the webpage, except for past races. Current races are given in a summarised format, full race information must be retrieved individually.
      operationId: getCategory
      parameters:
        - name: category
          in: path
          description: the category slug
          example: ootr
          required: true
          schema:
            type: string
      responses:
        200:
          headers:
            X-Exact-Date:
              $ref: '#/components/headers/DateTimeHeader'
          description: successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Category'
                properties:
                  image:
                    type: string
                    format: url
                    nullable: true
                    description: URL for the uploaded image to represent this category, or null if no image is set
                    example: |-
                      https://racetime.gg/media/zootr.png
                  info:
                    type: string
                    format: html
                    description: Category information blurb, as HTML. This is what appears in the sidebar on the main category page.
                  streaming_required:
                    type: boolean
                    description: Boolean indicating if streaming is required in this category. Moderators may override this on a per-race basis.
                    example: false
                  owners:
                    type: array
                    description: Array of user data blobs for users who have ownership rights on the category
                    items:
                      $ref: '#/components/schemas/User'
                  moderators:
                    type: array
                    description: Array of user data blobs for users who can moderate the category
                    items:
                      $ref: '#/components/schemas/User'
                  goals:
                    type: array
                    description: Array of strings naming the active goals in this category
                    items:
                      type: string
                      example: Any%
                  current_races:
                    type: array
                    description: Array of races that are currently open or in progress, in summary form. Each race's information is the same as what's given in the all races endpoint, excluding the category field.
                    items:
                      $ref: '#/components/schemas/Race'
components:
  headers:
    DateTimeHeader:
      schema:
        type: string
        format: date-time
      description: |
        As this site is about racing, timing is important to get right. Along with the JSON response, all API endpoints will also have an X-Exact-Date HTTP response header, which will contain the current date/time in standard ISO format, precise to the last millisecond. You can use this to account for differences between the server's clock and your local one, plus latency to the server.
        
        Although datestamps are given with millisecond prevision, given the nature of the web and latency you should not assume the data given is actually accurate to that degree. As a rule, when displaying data times should be rounded to the nearest decisecond, at most.
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for this user. Will remain the same even if the user changes their display name. IDs are always strings. A typical user ID is a string of 16 alphanumeric characters.
          example: fR42gLweew3pQlm4
        full_name:
          type: string
          description: A unique user display name, including their original display name and their scrim. Note that some users may not have a scrim, in which case `full_name` will be the same as `name`.
          example: Mario#5527
        name:
          type: string
          description: Just the user's display name. If you don't need an unambigiously unique name for the user, you can use this field. Otherwise you should use `full_name`.
          example: Mario
        discriminator:
          type: string
          nullable: true
          description: |-
            The discriminator (or scrim) is used to disambiguate identical display names. It is typically set to a random 4-digit string. Note that the scrim may start with 0 (e.g. "Bowser#0340"), so you should not treat this field as an integer. May be set to null if the user has no discriminator.
          example: 5527
        url:
          type: string
          format: url
          description: URL for the user's profile page
          example: /user/fR42gLweew3pQlm4
        avatar:
          type: string
          format: url
          nullable: true
          description: URL for the user's avatar picture, or null if the user has no avatar
          example: /media/mario.png
        pronouns:
          type: string
          nullable: true
          description: string indicating the user's preferred pronouns, or null if user has not set any pronouns
          example: he/him
        flair:
          type: string
          description: |
            The user's current flair, as a set of space-separated strings. This is used to indicate how the user should be styled. It should **not** be used to determine logical information, e.g. if a user is a moderator.
            
            Note that flairs are *context-sensitive*. If you're getting category data for example, you'll never see a "monitor" flair since this only applies in the context of race rooms.
          example: monitor supporter
        twitch_name:
          type: string
          nullable: true
          description: The user's connected Twitch account name, capitalised according to how they've set it on Twitch. Will be null if the user has no connected Twitch account.
          example: ItsaMeMario
        twitch_channel:
          type: string
          format: uri
          nullable: true
          description: The absolute URI for the user's connected Twitch account channel page. Will be null if the user has no connected Twitch account.
          example: |-
            https://www.twitch.tv/itsamemario
        can_moderate:
          type: boolean
          description: A boolean indicating if the user is a moderator. This is context-sensitive, as moderator status varies per category. If there is no category in context, this will always be false (even if user is staff).
          example: false
    Race:
      type: object
      properties:
        name:
          type: string
          description: The race's unique name, based on the category and a randomly assigned slug
          example: ootr/odd-pit-4755
        category:
          $ref: '#/components/schemas/Category'
        status:
          $ref: '#/components/schemas/Status'
        url:
          type: string
          description: URL for the main race page
          example: /ootr/odd-pit-4755
        data_url:
          type: string
          description: URL for the race data endpoint, which you can use to obtain more detailed race information
          example: /ootr/odd-pit-4755/data
        goal:
          $ref: '#/components/schemas/Goal'
        info:
          type: string
          description: String containing additional information for race entrants, as set by the monitors
        entrants_count:
          type: integer
          description: Total number of entrants in this race (including DQ/forfeits)
          example: 5
        entrants_count_finished:
          type: integer
          description: Total number of entrants that have finished (not counting DQ/forfeits)
          example: 0
        entrants_count_inactive:
          type: integer
          description: Total number of entrants that have been DQed or forfieted
          example: 1
        opened_at:
          type: string
          format: date-time
          description: Date/time when the race was first created
          example: |-
            2021-04-06T04:04:43.783Z
        started_at:
          type: string
          nullable: true
          format: date-time
          description: Date/time when the race started, or null if it hasn't started yet
          example: |-
            2021-04-06T04:09:51.174Z
        time_limit:
          type: string
          format: duration
          description: The maximum amount of time the race may be in progress for once it starts (ISO 8601 duration)
          example: |-
            P1DT00H00M00S
    Category:
      type: object
      nullable: true
      description: An object giving brief information about the category
      properties:
        name:
          type: string
          description: The name of the category
          example: |- 
            The Legend of Zelda: Ocarina of Time Randomizer
        short_name:
          type: string
          description: An abbreviated name
          example: OoTR
        slug:
          type: string
          description: Unique category slug (part of the URL)
          example: ootr
        url:
          type: string
          description: URL for the main category page
          example: /ootr
        data_url:
          type: string
          description: URL for the category data endpoint, which you can use to obtain more detailed category information
          example: /ootr/data
    Status:
      type: object
      description: An object giving brief information about the race's status
      properties:
        value:
          type: string
          description: A machine-parsable status text
          enum:
          - open
          - invitational
          - pending
          - in_progress
          - finished
          - cancelled
          example: in_progress
        verbose_value:
          type: string
          description: A user-parsable status text
          example: In progress
        help_text:
          type: string
          description: Describes the status
          example: Race is in progress
    Goal:
      type: object
      description: An object describing the race goal
      properties:
        name:
          type: string
          description: A string value indicating the current goal
          example: Any%
        custom:
          type: boolean
          description: A boolean indicating if the goal name was custom, or one of the pre-set category goals
          example: false
