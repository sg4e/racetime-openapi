openapi: 3.0.1
info:
  title: Racetime.gg API
  description: 'API for the open-source race server.'
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
servers:
  - url: https://racetime.gg
externalDocs:
  description: Racetime.gg website
  url: https://racetime.gg
paths:
  /races/data:
    get:
      tags:
        - racetime
      summary: All races
      description: Returns a list of all open and ongoing races
      responses:
        200:
          headers:
            X-Exact-Date:
              $ref: '#/components/headers/DateTimeHeader'
          description: successful operation
          content:
            application/json:
              schema:
                title: Races
                type: object
                properties:
                  races:
                    type: array
                    items:
                      $ref: '#/components/schemas/Race'
  /{category}/data:
    get:
      tags:
        - racetime
      summary: Category detail
      description: This endpoint includes all the basic information about the category shown on the webpage, except for past races. Current races are given in a summarised format, full race information must be retrieved individually.
      operationId: getCategory
      parameters:
        - name: category
          in: path
          description: the category slug
          example: ootr
          required: true
          schema:
            type: string
      responses:
        200:
          headers:
            X-Exact-Date:
              $ref: '#/components/headers/DateTimeHeader'
          description: successful operation
          content:
            application/json:
              schema:
                title: CategoryDetails
                allOf:
                  - $ref: '#/components/schemas/Category'
                properties:
                  image:
                    type: string
                    format: url
                    nullable: true
                    description: URL for the uploaded image to represent this category, or null if no image is set
                    example: |-
                      https://racetime.gg/media/zootr.png
                  info:
                    type: string
                    format: html
                    description: Category information blurb, as HTML. This is what appears in the sidebar on the main category page.
                  streaming_required:
                    type: boolean
                    description: Boolean indicating if streaming is required in this category. Moderators may override this on a per-race basis.
                    example: false
                  owners:
                    type: array
                    description: Array of user data blobs for users who have ownership rights on the category
                    items:
                      $ref: '#/components/schemas/User'
                  moderators:
                    type: array
                    description: Array of user data blobs for users who can moderate the category
                    items:
                      $ref: '#/components/schemas/User'
                  goals:
                    type: array
                    description: Array of strings naming the active goals in this category
                    items:
                      type: string
                      example: Any%
                  current_races:
                    type: array
                    description: Array of races that are currently open or in progress, in summary form. Each race's information is the same as what's given in the all races endpoint, excluding the category field.
                    items:
                      $ref: '#/components/schemas/Race'
  /{category}/races/data:
    get:
      tags:
        - racetime
      summary: Past category races
      description: |
        Returns a list of all completed (finished and cancelled) races in a category. This list is paginated, and sorted by each race's completion time (the ended_at field), most recent first. 10 races are returned per page.

        By default each race has the same data as the all races endpoint, excluding the `category` field. If you enable `show_entrants`, the races will additionally list entrant data in the same format used by the race detail endpoint.
      operationId: getPastRacesByCategory
      parameters:
      - name: category
        in: path
        description: the category slug
        example: ootr
        required: true
        schema:
          type: string
      - name: show_entrants
        in: query
        description:  If set to true, include entrant data for each race returned
        example: true
        required: false
        schema:
          type: boolean
      - name: page
        in: query
        description:  Set to a positive integer (starting from 1) to retrieve paginated data
        example: 2
        required: false
        schema:
          type: integer
      responses:
        200:
          headers:
            X-Exact-Date:
              $ref: '#/components/headers/DateTimeHeader'
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RacePagination'
  /{category}/leaderboards/data:
    get:
      tags:
        - racetime
      summary: Category leaderboards
      description: Provides category leaderboard data
      operationId: getLeaderboards
      parameters:
        - name: category
          in: path
          description: the category slug
          example: ootr
          required: true
          schema:
            type: string
      responses:
        200:
          headers:
            X-Exact-Date:
              $ref: '#/components/headers/DateTimeHeader'
          description: successful operation
          content:
            application/json:
              schema:
                title: Leaderboards
                type: object
                properties:
                  leaderboards:
                    type: array
                    items:
                      title: Leaderboard
                      type: object
                      properties:
                        goal:
                          type: string
                          description: String name of the goal
                          example: Any%
                        num_ranked:
                          type: integer
                          description: Total number of ranked participants for this leaderboard
                          example: 479
                        rankings:
                          type: array
                          description: An ordered array of participants, starting from the highest ranked to the lowest
                          items:
                            type: object
                            properties:
                              user:
                                $ref: '#/components/schemas/User'
                              place:
                                type: integer
                                description: The user's ranking as an integer, counting from 1 onward
                                example: 1
                              place_ordinal:
                                type: string
                                description: Same as place except it's an ordinal string, i.e. "1st", "2nd", "3rd", and so on
                                example: 1st
                              score:
                                type: integer
                                description: The user's calculated score, always a positive integer. Users who have never played start with a score of 833.
                                example: 3413
                              times_raced:
                                type: integer
                                description: The number of times the user has entered into recorded races for this goal (including DNF/DQ results)
                                example: 42
                              # the API also returns a best_time ISO duration, but I don't see this documented anywhere
  /{category}/{race}/data:
    get:
      tags:
        - racetime
      summary: Race detail
      description: |
        This endpoint covers everything you might want to know about a race. All the data shown on the race page, except for chat messages, is provided. A full breakdown of entrants is also here, which is sorted by race status and finish position, as appropriate.
        
        **Note:** For races in progress, the timer is not part of the API response, since the API is cached it would be impossible to update this in real-time. To work out the timer, you should use the value of `started_at` (and the `X-Exact-Date` header to account for clock sync inaccuracy - see above) and `ended_at` (if the race has concluded).
      operationId: getRaceDetails
      parameters:
        - name: category
          in: path
          description: the category slug
          example: ootr
          required: true
          schema:
            type: string
        - name: race
          in: path
          description: the race room identifier
          example: jolly-twinrova-3940
          required: true
          schema:
            type: string
      responses:
        200:
          headers:
            X-Exact-Date:
              $ref: '#/components/headers/DateTimeHeader'
          description: successful operation
          content:
            application/json:
              schema:
                title: RaceDetails
                allOf:
                  - $ref: '#/components/schemas/Race'
                properties:
                  version:
                    type: integer
                    description: Integer indicating the data's version. This is incremented whenever a race changes.
                    example: 45
                  websocket_url:
                    type: string
                    format: url
                    description: URL of the race WebSocket, used by the frontend for chat messages and real-time updates
                    example: /ws/race/jolly-twinrova-3940
                  websocket_bot_url:
                    type: string
                    format: url
                    description: URL of the WebSocket for category bots
                    example: /ws/o/bot/jolly-twinrova-3940
                  websocket_oauth_url:
                    type: string
                    format: url
                    description: URL of the WebSocket for OAuth2-authenticated user connections. Used by third-party applications.
                    example: /ws/o/race/jolly-twinrova-3940
                  entrants:
                    type: array
                    description: The entrants list, given as an array. Ordered by race status, then by finish position (if applicable), then by score (if available), and finally by name.
                    items:
                      $ref: '#/components/schemas/Entrant'
                  opened_at:
                    type: string
                    format: date-time
                    description: Date/time when the race was first created
                    example: |-
                      2021-04-06T22:05:59.493Z
                  start_delay:
                    type: string
                    format: duration
                    description: The time allocated for the countdown, i.e. time lapse between the last entrant readying up and the race starting
                    example: P0DT00H00M15S
                  started_at:
                    type: string
                    format: date-time
                    nullable: true
                    description: Date/time when the race started, or null if it hasn't started yet
                    example: |-
                      2021-04-06T23:00:34.767Z
                  ended_at:
                    type: string
                    format: date-time
                    nullable: true
                    description: Date/time when the race ended, or null if it hasn't finished yet
                    example: |-
                      2021-04-06T23:50:34.767Z
                  cancelled_at:
                    type: string
                    format: date-time
                    nullable: true
                    description: |-
                      Date/time when the race was cancelled, or null if it hasn't been cancelled. Note: a race may be cancelled at any point before it's finished. If it was cancelled before the race started, `started_at` and `ended_at` will not be set. If it was cancelled after the race started, `started_at` will be set and `ended_at` will be equal to `cancelled_at`.
                    example: |-
                      2021-04-06T23:50:34.767Z
                  unlisted:
                    type: boolean
                    description: Boolean indicating an unlisted race (hidden from category view except for moderators)
                  time_limit:
                    type: string
                    format: duration
                    description: The maximum amount of time the race may be in progress for once it starts
                    example: P1DT00H00M00S
                  streaming_required:
                    type: boolean
                    description: Boolean indicating if entrants are required to stream in this race
                  auto_start:
                    type: boolean
                    description: Boolean indicating if the race will start automatically when all entrants are ready
                  opened_by:
                    $ref: '#/components/schemas/User'
                    nullable: true
                    description: User data blob for the user who opened the race room, or null if the room was opened by a bot. If present, this user is always a race monitor.
                  monitors:
                    type: array
                    description: Array of user data blobs for race monitors (in addition to the room opener) in this race
                    items:
                      $ref: '#/components/schemas/User'
                  recordable:
                    type: boolean
                    description: Boolean indicating a race can be recorded once it's finished. A moderator may still opt to not record the race.
                  recorded:
                    type: boolean
                    description: Boolean indicating if the race has been recorded by a moderator
                  recorded_by:
                    $ref: '#/components/schemas/User'
                    nullable: true
                    description: User data blob of the moderator who recorded this race
                  allow_comments:
                    type: boolean
                    description: Boolean indicating if users may add a glib remark after they finish racing
                  hide_comments:
                    type: boolean
                    description: Boolean indicating if entrant comments will be hidden until the race is finished (or cancelled)
                  allow_midrace_chat:
                    type: boolean
                    description: Boolean indicating if users may chat while the race is in progress (does not affect monitors or moderators)
                  allow_non_entrant_chat:
                    type: boolean
                    description: Boolean indicating if users who have not entered the race may chat while the race is in progress (does not affect moderators)
                  chat_message_delay:
                    type: string
                    format: duration
                    description: Length of time where chat messages will only appear for race monitors
                    example: P0DT00H00M00S
  /user/{user}/races/data:
    get:
      tags:
        - racetime
      summary: Past user races
      description: |
        Returns a list of all finished (but not cancelled) races that a user has entered. This list is paginated, and sorted by each race's completion time (the `ended_at` field), most recent first. 10 races are returned per page.
        
        This endpoint behaves similarly to the past category races endpoint. Each race has the same data as the all races endpoint, unless you enable `show_entrants`. If enabled, the races will additionally list entrant data in the same format used by the race detail endpoint.
      operationId: getPastRacesByUser
      parameters:
      - name: user
        in: path
        # Not documented, I tested and then wrote this:
        description: The unique identifier for the user returned by the user search endpoint
        example: b8GPMWwQpY31nEk0
        required: true
        schema:
          type: string
      - name: show_entrants
        in: query
        description:  If set to true, include entrant data for each race returned
        example: true
        required: false
        schema:
          type: boolean
      - name: page
        in: query
        description:  Set to a positive integer (starting from 1) to retrieve paginated data
        example: 1
        required: false
        schema:
          type: integer
      responses:
        200:
          headers:
            X-Exact-Date:
              $ref: '#/components/headers/DateTimeHeader'
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RacePagination'
  /user/search:
    get:
      tags:
        - racetime
      summary: User search
      description: Searches for registered users
      operationId: getUsers
      parameters:
        - name: name
          in: query
          description: Match users whose name starts with the given string (case insensitive)
          example: sg4e
          required: false
          schema:
            type: string
        - name: scrim
          in: query
          description: Match users with the given discriminator string (should be a set of four digits, e.g. '0844'). Exact match only.
          example: 4461
          required: false
          schema:
            type: string
        - name: term
          in: query
          description: Can be a name, partial name, or a name and discriminator (given in the form 'Name#1234'). Match users with the given data.
          example: sg4e#4461
          required: false
          schema:
            type: string
      responses:
        200:
          headers:
            X-Exact-Date:
              $ref: '#/components/headers/DateTimeHeader'
          description: successful operation
          content:
            application/json:
              schema:
                title: Users
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
components:
  headers:
    DateTimeHeader:
      schema:
        type: string
        format: date-time
      description: |
        As this site is about racing, timing is important to get right. Along with the JSON response, all API endpoints will also have an X-Exact-Date HTTP response header, which will contain the current date/time in standard ISO format, precise to the last millisecond. You can use this to account for differences between the server's clock and your local one, plus latency to the server.
        
        Although datestamps are given with millisecond prevision, given the nature of the web and latency you should not assume the data given is actually accurate to that degree. As a rule, when displaying data times should be rounded to the nearest decisecond, at most.
  schemas:
    User:
      type: object
      nullable: true
      # Having to declare nullable here instead of where the User schema is referenced is a deficiency of OpenAPI 3.0.1, see https://stackoverflow.com/questions/40920441/how-to-specify-a-property-can-be-null-or-a-reference-with-swagger . It is to be fixed in 3.1
      properties:
        id:
          type: string
          description: A unique identifier for this user. Will remain the same even if the user changes their display name. IDs are always strings. A typical user ID is a string of 16 alphanumeric characters.
          example: fR42gLweew3pQlm4
        full_name:
          type: string
          description: A unique user display name, including their original display name and their scrim. Note that some users may not have a scrim, in which case `full_name` will be the same as `name`.
          example: Mario#5527
        name:
          type: string
          description: Just the user's display name. If you don't need an unambigiously unique name for the user, you can use this field. Otherwise you should use `full_name`.
          example: Mario
        discriminator:
          type: string
          nullable: true
          description: |-
            The discriminator (or scrim) is used to disambiguate identical display names. It is typically set to a random 4-digit string. Note that the scrim may start with 0 (e.g. "Bowser#0340"), so you should not treat this field as an integer. May be set to null if the user has no discriminator.
          example: 5527
        url:
          type: string
          format: url
          description: URL for the user's profile page
          example: /user/fR42gLweew3pQlm4
        avatar:
          type: string
          format: url
          nullable: true
          description: URL for the user's avatar picture, or null if the user has no avatar
          example: /media/mario.png
        pronouns:
          type: string
          nullable: true
          description: string indicating the user's preferred pronouns, or null if user has not set any pronouns
          example: he/him
        flair:
          type: string
          description: |
            The user's current flair, as a set of space-separated strings. This is used to indicate how the user should be styled. It should **not** be used to determine logical information, e.g. if a user is a moderator.
            
            Note that flairs are *context-sensitive*. If you're getting category data for example, you'll never see a "monitor" flair since this only applies in the context of race rooms.
          example: monitor supporter
        twitch_name:
          type: string
          nullable: true
          description: The user's connected Twitch account name, capitalised according to how they've set it on Twitch. Will be null if the user has no connected Twitch account.
          example: ItsaMeMario
        twitch_channel:
          type: string
          format: uri
          nullable: true
          description: The absolute URI for the user's connected Twitch account channel page. Will be null if the user has no connected Twitch account.
          example: |-
            https://www.twitch.tv/itsamemario
        can_moderate:
          type: boolean
          description: A boolean indicating if the user is a moderator. This is context-sensitive, as moderator status varies per category. If there is no category in context, this will always be false (even if user is staff).
          example: false
    Race:
      type: object
      properties:
        name:
          type: string
          description: The race's unique name, based on the category and a randomly assigned slug
          example: ootr/jolly-twinrova-3940
        category:
          $ref: '#/components/schemas/Category'
        status:
          $ref: '#/components/schemas/Status'
        url:
          type: string
          format: url
          description: URL for the main race page
          example: /ootr/jolly-twinrova-3940
        data_url:
          type: string
          format: url
          description: URL for the race data endpoint, which you can use to obtain more detailed race information
          example: /ootr/jolly-twinrova-3940/data
        goal:
          $ref: '#/components/schemas/Goal'
        info:
          type: string
          description: String containing additional information for race entrants, as set by the monitors
        entrants:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Entrant'
        entrants_count:
          type: integer
          description: Total number of entrants in this race (including DQ/forfeits)
          example: 5
        entrants_count_finished:
          type: integer
          description: Total number of entrants that have finished (not counting DQ/forfeits)
          example: 0
        entrants_count_inactive:
          type: integer
          description: Total number of entrants that have been DQed or forfieted
          example: 1
        opened_at:
          type: string
          format: date-time
          description: Date/time when the race was first created
          example: |-
            2021-04-06T04:04:43.783Z
        started_at:
          type: string
          nullable: true
          format: date-time
          description: Date/time when the race started, or null if it hasn't started yet
          example: |-
            2021-04-06T04:09:51.174Z
        time_limit:
          type: string
          format: duration
          description: The maximum amount of time the race may be in progress for once it starts (ISO 8601 duration)
          example: |-
            P1DT00H00M00S
    Category:
      type: object
      nullable: true
      description: An object giving brief information about the category
      properties:
        name:
          type: string
          description: The name of the category
          example: |- 
            The Legend of Zelda: Ocarina of Time Randomizer
        short_name:
          type: string
          description: An abbreviated name
          example: OoTR
        slug:
          type: string
          description: Unique category slug (part of the URL)
          example: ootr
        url:
          type: string
          format: url
          description: URL for the main category page
          example: /ootr
        data_url:
          type: string
          format: url
          description: URL for the category data endpoint, which you can use to obtain more detailed category information
          example: /ootr/data
    Status:
      type: object
      description: An object giving brief information about the race's status
      properties:
        value:
          type: string
          description: A machine-parsable status text
          enum:
          - open
          - invitational
          - pending
          - in_progress
          - finished
          - cancelled
          example: in_progress
        verbose_value:
          type: string
          description: A user-parsable status text
          example: In progress
        help_text:
          type: string
          description: Describes the status
          example: Race is in progress
    Goal:
      type: object
      description: An object describing the race goal
      properties:
        name:
          type: string
          description: A string value indicating the current goal
          example: Any%
        custom:
          type: boolean
          description: A boolean indicating if the goal name was custom, or one of the pre-set category goals
          example: false
    Entrant:
      type: object
      description: An object describing a person in a race
      properties:
        user:
          $ref: '#/components/schemas/User'
        status:
          type: object
          description: An object describing the entrant's current status
          properties:
            value:
              type: string
              description: A machine-parsable status text
              enum:
              - requested
              - invited
              - declined
              - ready
              - not_ready
              - in_progress
              - done
              - dnf
              - dq
              example: in_progress
            verbose_value:
              type: string
              description: A user-parsable status text
              example: In progress
            help_text:
              type: string
              description: Describes the status
              example: Did not finish the race
        finish_time:
          type: string
          format: duration
          nullable: true
          description: The user's final finish time, or null if they've not finished
          example: P0DT04H06M33.007597S
        finished_at:
          type: string
          format: date-time
          nullable: true
          description: The date/time when the user finished, or null if they've not finished
          example: |-
            2021-04-07T03:07:07.774Z
        place:
          type: integer
          nullable: true
          description: Integer indicating what position the user finished in
          example: 1
        place_ordinal:
          type: string
          nullable: true
          description: String ordinal version of `place`
          example: 1st
        score:
          type: integer
          nullable: true
          # Though not in the documentation, the endpoint can return null for this value.
          description: Integer amount of points earned by this entrant on the relevant leaderboard. Note that this is **not** the entrant's current score (unless the race is in progress), it is the score they had when they *entered* the race, not after.
          example: 2942
        score_change:
          type: integer
          nullable: true
          description: Integer amount of points gained/lost as a result of this race, or null (not zero!) if race is not recorded
        comment:
          type: string
          nullable: true
          description: A string containing a pithy comeback supplied by the user post-race, or null if they have no comment. If `hide_comments` is true and the race has not concluded, this field is always null.
        has_comment:
          type: boolean
          description: A boolean indicating if the entrant has made a comment. This field is unaffected by the `hide_comments` setting.
        stream_live:
          type: boolean
          description: Boolean indicating if the user's stream is currently live. This is updated in real-time while a race is in progress, but once an entrant has finished, forfeited or been disqualified it will not be updated.
        stream_override:
          type: boolean
          description: Boolean indicating if a moderator overrode the streaming requirement for this race entrant, allowing them to ready up without their stream being online.
    RacePagination:
      # This object isn't documented in the racetime docs
      type: object
      properties:
        count:
          type: integer
          example: 2692
        num_pages:
          type: integer
          example: 270
        races:
          type: array
          items:
            $ref: '#/components/schemas/Race'
